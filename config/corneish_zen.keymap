#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
	chosen {
		zmk,matrix_transform = &default_transform;
		//zmk,matrix_transform = &five_column_transform;
	};
};

/ {
				behaviors {
						hm: homerow_mods {
								compatible = "zmk,behavior-hold-tap";
								label = "HOMEROW_MODS";
								#binding-cells = <2>;
								tapping-term-ms = <230>;
								quick-tap-ms = <0>;
								flavor = "tap-preferred";
								bindings = <&kp>, <&kp>;
						};
				};
				
				combos {
						compatible = "zmk,combos";
						combo_left_LT {
								timeout-ms = <50>;
								key-positions = <1 2>;
								bindings = <&kp LT>;
						};
						combo_right_GT {
							timeout-ms = <50>;
							key-positions = <9 10>;
							bindings = <&kp GT>;
						};
						combo_left_LPAR {
							timeout-ms = <50>;
							key-positions = <2 3>;
							bindings = <&kp LPAR>;
						};
						combo_right_RPAR {
							timeout-ms = <50>;
							key-positions = <8 9>;
							bindings = <&kp RPAR>;
						};
						combo_left_LBRC {
							timeout-ms = <50>;
							key-positions = <3 4>;
							bindings = <&kp LBRC>;
						};
						combo_right_RBRC {
							timeout-ms = <50>;
							key-positions = <7 8>;
							bindings = <&kp RBRC>;
						};
						combo_VOL_UP {
							timeout-ms = <50>;
							key-positions = <1 2>;
							bindings = <&kp C_VOL_UP>;
						};
						combo_VOL_DN {
							timeout-ms = <50>;
							key-positions = <13 14>;
							bindings = <&kp C_VOL_DN>;
						};
						combo_VOL_MUTE {
							timeout-ms = <50>;
							key-positions = <25 26>;
							bindings = <&kp C_MUTE>;
						};
				};
				
				keymap {
								compatible = "zmk,keymap";

								default_layer {
												label = "ABC";
// -----------------------------------------------------------------------------------------
// |	XXX |	Q	|	W	|	E	|	R	|	T	| 	|	Y	|	U 	|	I	|	O	|	P	| XXX	|
// |	XXX |	A	|	S	|	D	|	F	|	G	| 	|	H	|	J 	|	K	|	L	|	;	|	' 	|
// |	XXX |	Z	|	X	|	C	|	V	|	B	| 	|	N	|	M 	|	,	|	.	|	/	| XXX	|
//										| ESC | BSPC| TAB | 	| CAP | SPC	| ENT |
												bindings = <
				&kp TAB &kp Q 	&kp W 	&kp E 	&kp R 	&kp T 	&kp Y 	&kp U 	&kp I 	&kp O 	&kp P 	&kp BSLH
	&kp CAPS &hm LSHIFT A	&hm LCTRL S &hm LALT D &hm LGUI F &kp G 	&kp H &hm RGUI J	&hm RALT K 		&hm RCTRL L 	&hm RSHIFT SEMI &kp SQT
 	&kp MINUS	&kp Z 	&kp X &kp C &kp V &kp B 	&kp N &kp M	&kp COMMA &kp DOT &kp FSLH &kp EQUAL
									&mt LGUI ESC &lt 1 BSPC &lt 2 TAB 	&kp CAPS &lt 1 SPACE &lt 2 ENTER
												>;
								};
								lower_layer {
												label = "123";
// -----------------------------------------------------------------------------------------
// |	TAB |	1	|	2	|	3	|	4	|	5	| 	|	6	|	7	|	8	|	9	|	0	| BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 | 	| LFT | DWN |	UP | RGT | 		|			|
// | SHFT | 		| 		| 		| 		| 		| 	| 		| 		| 		| 		| 		|			|
//										| GUI | 		| SPC | 	| ENT | 		| ALT |
												bindings = <
 	&kp TAB		&kp N1 			&kp N2 			&kp N3 			&kp N4 			&kp N5 				&kp N6 	&kp N7 	&kp N8 &kp N9		&kp N0 &kp BSPC
 	&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 	&trans &kp UP &kp LEFT &kp RIGHT &kp DOWN &trans
 	&kp LSHFT	&trans 			&trans 			&trans 			&trans 			&trans 				&trans 	&trans 	&trans &trans		&trans &trans
																		&kp LGUI 		&trans 			&kp SPACE			&kp RET	&trans 	&kp RALT
												>;
								};

								raise_layer {
												label = "@!#";
// -----------------------------------------------------------------------------------------
// |	TAB |	!	|	@	|	#	|	$	|	%	| 	|	^	|	&	|	*	|	(	|	)	| BKSP |
// | CTRL | 		| 		| 		| 		| 		| 	|	-	|	=	|	[	|	]	|	\	|	` 	|
// | SHFT | 		| 		| 		| 		| 		| 	|	_	|	+	|	{	|	}	| "|" |	~ 	|
//										| GUI | 		| SPC | 	| ENT | 		| ALT |
												bindings = <
 	&kp	TAB	&kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT 	&kp CARET &kp AMPS	&kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
 	&kp LCTRL &trans 	&trans &trans 	&trans 	&trans			&kp MINUS &kp EQUAL &kp LBKT				&kp RBKT &kp BSLH &kp GRAVE
 	&kp LSHFT &trans 	&trans &trans 	&trans 	&trans			&kp UNDER &kp PLUS	&kp LBRC				&kp RBRC &kp PIPE &kp TILDE
											 		&kp LGUI &trans 	&kp SPACE 	&kp RET 	&trans		&kp RALT
												>;
								};
				};
};